package test121;

import java.util.Arrays;

//FullQueueException 异常类	
class FullQueueException extends IndexOutOfBoundsException {
	String ERROR_INFO;

	FullQueueException(String s) {
		this.ERROR_INFO = new String(s);
	}

	public String toString() {
		return "FullQueueException" + ERROR_INFO;
	}
}

class EmptyQueueException extends IndexOutOfBoundsException {
	String ERROR_INFO;

	EmptyQueueException(String s) {
		this.ERROR_INFO = new String(s);
	}

	public String toString() {
		return "EmptyQueueException" + ERROR_INFO;
	}
}

// 循环队列
public class CircleQueue<T> {

	private int DEFAULT_SIZE = 5;

	private int capacity;// 保存数组的长度

	private Object[] elementData;// 定义一个数组用于保存循环队列的元素

	private int front = 0;// 队头

	private int rear = 0;// 队尾

	// 以默认数组长度创建空循环队列
	public CircleQueue() {
		capacity = DEFAULT_SIZE;
		elementData = new Object[capacity];
	}

	// 以一个初始化元素来创建循环队列
	public CircleQueue(T element) {
		this();
		elementData[0] = element;
		rear++;
	}

	/**
	 * 以指定长度的数组来创建循环队列
	 * 
	 * @param element
	 *            指定循环队列中第一个元素
	 * @param initSize
	 *            指定循环队列底层数组的长度
	 */
	public CircleQueue(T element, int initSize) {
		this.capacity = initSize;
		elementData = new Object[capacity];
		elementData[0] = element;
		rear++;
	}

	// 获取循环队列的大小
	public int size() {
		if (isEmpty()) {
			return 0;
		}
		return rear > front ? rear - front : capacity - (front - rear);
	}

	// 插入队列
	public void addBack(T element) throws FullQueueException {
		if (rear == front && elementData[front] != null) {
			throw new FullQueueException("队列已满的异常"); // 抛出异常
		}
		elementData[rear++] = element;
		// 如果rear已经到头，那就转头
		rear = rear == capacity ? 0 : rear;
	}

	// 移除队列
	public T removeFront() throws EmptyQueueException {
		if (isEmpty()) {
			throw new EmptyQueueException("空队列异常"); // 抛出异常
		}
		// 保留队列的rear端的元素的值
		T oldValue = (T) elementData[front];
		// 释放队列的rear端的元素
		elementData[front++] = null;
		// 如果front已经到头，那就转头
		front = front == capacity ? 0 : front;
		return oldValue;
	}

	// 返回队列顶元素，但不删除队列顶元素
	public T element() throws EmptyQueueException {
		if (isEmpty()) {
			throw new EmptyQueueException("空队列异常");
		}
		return (T) elementData[front];
	}

	// 判断循环队列是否为空队列
	public boolean isEmpty() {
		// rear==front且rear处的元素为null
		return rear == front && elementData[rear] == null;
	}

	// 清空循环队列
	public void clear() {
		// 将底层数组所有元素赋为null
		Arrays.fill(elementData, null);
		front = 0;
		rear = 0;
	}
}
