
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.Scanner;

class Person implements Comparable<Person> {
	// 3
	// private int id;
	private String name;
	// private String sbmtime;// submit time
	private int SolveNum;//

	private Problem[] pbmarray = new Problem[100];// 100 ge timu

	Person() {
		for (int i = 0; i < Main.PBM_NAME_LEN; i++)
			pbmarray[i] = new Problem(Main.PBM_NAME[i]);// 10000,10001--10004
	}

	Person(String n) {
		this.name = new String(n);
		for (int i = 0; i < Main.PBM_NAME_LEN; i++)
			pbmarray[i] = new Problem(Main.PBM_NAME[i]);// 10000,10001--10004
		// this.sbmtime = new String(sbtm);
	}

	// Person copy
	Person(String sn, int sSolve, Problem[] sPBMA) {
		this.name = new String(sn);
		this.SolveNum = sSolve;
		for (int ii = 0; ii < Main.PBM_NAME_LEN; ii++) {
			// fuzhi shuzu
			// private int pbmid;
			// private boolean isAC = false;// AC
			// private int WA_cnt = 0;// cuowu cishu
			// private String Solvetime = "";
			this.pbmarray[ii] = new Problem(sPBMA[ii].getpbmid(), sPBMA[ii].getisAC(), sPBMA[ii].getWAcnt(),
					sPBMA[ii].getSolvetime());///////////////////////////////////////////////////////////////////////////////////////
		}

	}

	public Problem[] getPBM_Arr() {

		return this.pbmarray;
	}

	////
	public String getname() {
		return this.name;
	}

	public String getHowmanySolve() {
		String str = "";
		for (int ii = 0; ii < Main.PBM_NAME_LEN; ii++) {
			if (this.pbmarray[ii].getisAC()) {
				str += this.pbmarray[ii].getSolvetime() + " ";// getSolvetime
			} else if (this.pbmarray[ii].getWAcnt() != 0) {
				str += (this.pbmarray[ii].getWAcnt() * -1) + " ";
			} else {

				str += "0 ";
			}

		}
		return str;
	}

	public long getPersonValue() {
		long diff = 0;

		for (int i = 0; i < Main.PBM_NAME_LEN; i++)

			// getSolvetime == ("HH:mm:ss"); have no year!
			if (this.pbmarray[i].getisAC()) {
				// AC timu
				SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

				// H = M = S = 0l;
				String strSolvetime = this.pbmarray[i].getSolvetime();
				String[] stime = strSolvetime.substring(0, strSolvetime.length()).split(":");
				strSolvetime = "";
				for (int i1 = 0; i1 < stime.length; i1++) {
					if (stime[i1].length() < 2)
						stime[i1] = "0" + stime[i1];
					strSolvetime += stime[i1];
					if (i1 != stime.length - 1)
						strSolvetime += ":";
				}
				try {
					Date d2 = sdf.parse("00:00:00");// H M S
					Date d1 = sdf.parse(strSolvetime);

					diff = diff + (d1.getTime() - d2.getTime()) / 1000;//

				} catch (Exception e) {

				}

			}
		return diff;
	}

	public int getSolveNum() {
		return SolveNum;
	}

	public void addSolvenum() {
		this.SolveNum++;
	}

	public void SubmitInfo(int pbmnum, String res, String time) {
		for (int i = 0; i < Main.PBM_NAME_LEN; i++)

			if (pbmnum == pbmarray[i].getpbmid()) {
				// zhaodao tijiaode timu
				if (res.equals(Main.ACstr) && (pbmarray[i].getisAC()) == false) {
					// AC
					this.pbmarray[i].setSolvetime(time);
					this.addSolvenum();

				} else if (!pbmarray[i].getisAC()) {
					// not AC
					this.pbmarray[i].addWA_NUM();
				}
			} else {

			}
	}

	public int compareTo(Person o) {

		// this win = 1:-1
		Person p = (Person) o;
		if (this.SolveNum != p.SolveNum) {

			return (this.SolveNum > p.SolveNum ? 1 : -1);
		} else if (this.getPersonValue() != p.getPersonValue())
			return (this.getPersonValue() > p.getPersonValue() ? -1 : 1);
		else if (this.getname().compareTo(p.getname()) != 0) {
			// a.compareTo(c) = a-c = -2;
			return (this.getname().compareTo(p.getname()) < 0 ? 1 : -1);
		} else {

		}
		return 0;

	}

}


////////////////////////////////////////////////////////////////////////////////
class Problem {
	private int pbmid;
	private boolean isAC = false;// AC
	private int WA_cnt = 0;// cuowu cishu
	private String Solvetime = "";

	// jiaohuan
	public Problem(int spbmid, boolean sisAC, int sWA_cnt, String sSolvet) {
		this.pbmid = spbmid;
		this.isAC = sisAC;
		this.WA_cnt = sWA_cnt;
		this.Solvetime = new String(sSolvet);

	}

	public Problem(int id) {
		this.pbmid = id;
	}

	public int get_fa_Time() {
		if (isAC) {
			return WA_cnt * 20 * 60;// s
		}
		return 0;// bujilu
	}

	public int getWAcnt() {
		return this.WA_cnt;
	}

	public boolean getisAC() {
		return this.isAC;
	}

	public String getSolvetime() {

		// =返回这道题的解决时间 包括罚时
		return this.Solvetime;
	}

	public void setpbmid(int num) {
		this.pbmid = num;
	}

	public int getpbmid() {
		return this.pbmid;
	}

	public void setSolvetime(String timefmt) {
		// =返回这道题的解决时间 包括罚时
		// String[] bng_HMS = Main.BgnTM.split(" ");
		this.Solvetime = new String(getT1_T2(timefmt, Main.BgnTM, WA_cnt * 20 * 60));// HMS
		this.isAC = true;

	}

	public void addWA_NUM() {
		this.WA_cnt++;
	}

	public static String getT1_T2(String t1, String t2, int WA_time) {
		// moren riqi xx:xx:xx
		t1 = t1.substring(0, 19);
		t2 = t2.substring(0, 19);
		// biao zhun geshi

		// String[] stime = t1.substring(0, t1.length()).split(":");
		// t1 = "";
		// for (int i = 0; i < stime.length; i++) {
		// if (stime[i].length() < 2)
		// stime[i] = "0" + stime[i];
		//
		// t1 += stime[i];
		// if (i != stime.length - 1)
		// t1 += ":";
		// }
		// // t2
		// stime = t2.substring(0, t2.length()).split(":");
		// t2 = "";
		// for (int i = 0; i < stime.length; i++) {
		// if (stime[i].length() < 2)
		// stime[i] = "0" + stime[i];
		// t2 += stime[i];
		// if (i != stime.length - 1)
		// t2 += ":";
		// }

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		long diff = 0;
		long d;
		long H;
		long S;
		long M;
		H = M = S = 0l;
		// String []bgntm_DH=Main.BgnTM.split(" ");
		try {
			Date d1 = sdf.parse(t1);// H M S
			Date d2 = sdf.parse(t2);

			diff = d1.getTime() - d2.getTime() + WA_time * 1000;// WA_time
																// danwei: s

			diff = diff / 1000;//
			H = diff / 3600;
			M = (diff % 3600) / 60;
			S = (diff % 3600) % 60;
		} catch (Exception e) {
			// TODO: handle exception
		}

		String str = "" + H + ":" + M + ":" + S;

		return str;
	}
 
	public static long getT1_T21(String t1, String t2, int WA_time) {
		// moren riqi xx:xx:xx 19 t1 - t2
		// 处理 2009-9-8

		//

		t1 = t1.substring(0, 19);
		t2 = t2.substring(0, 19);

		// String[] stime = t1.substring(0, t1.length()).split(":");
		// t1 = "";
		// for (int i = 0; i < stime.length; i++) {
		// if (stime[i].length() < 2)
		// stime[i] = "0" + stime[i];
		//
		// t1 += stime[i];
		// if (i != stime.length - 1)
		// t1 += ":";
		// }
		// // t2
		// stime = t2.substring(0, t2.length()).split(":");
		// t2 = "";
		// for (int i = 0; i < stime.length; i++) {
		// if (stime[i].length() < 2)
		// stime[i] = "0" + stime[i];
		// t2 += stime[i];
		// if (i != stime.length - 1)
		// t2 += ":";
		// }

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		long diff = 0;
		long H;
		long S;
		long M;
		H = M = S = 0l;
		// String []bgntm_DH=Main.BgnTM.split(" ");
		try {
			Date d1 = sdf.parse(t1);// H M S
			Date d2 = sdf.parse(t2);

			diff = d1.getTime() - d2.getTime() + WA_time;
			diff = diff / 1000;//
			H = diff / 3600;
			M = (diff % 3600) / 60;
			S = (diff % 3600) % 60;
		} catch (Exception e) {
			// TODO: handle exception
		}

		// String str = "" + H + ":" + M + ":" + S;

		return diff;
	}
}
// Pbm class -end

public class Main {

	static String ACstr = "Accepted";
	static String BgnTM = "";
	static String EndTM = "";
	static int[] PBM_NAME = new int[1024];
	static Person[] person = new Person[1024];
	static int PBM_NAME_LEN = 0;
	static int TIMUNUM = 0;

	// Quick
	/* //////////////////////////方式二//////////////////////////////// */
	// 更高效点的代码：
	public Person[] quickSort(Person[] targetArr, int start, int end) {
		int i = start + 1, j = end;
		Person key = targetArr[start];
		// SortUtil<T> sUtil=newSortUtil<T> ();

		if (start >= end)
			return (targetArr);

		/*
		 * 从i++和j--两个方向搜索不满足条件的值并交换
		 *
		 * 条件为：i++方向小于key，j--方向大于key
		 */
		while (true) {
			while (targetArr[j].compareTo((Person) key) > 0)
				j--;
			while (targetArr[i].compareTo((Person) key) < 0 && i < j)
				i++;
			if (i >= j)
				break;
			// sUtil.swap(targetArr,i,j);
			// swap(targetArr,i,j);
			Person temp = new Person(targetArr[i].getname(), targetArr[i].getSolveNum(), targetArr[i].getPBM_Arr());
			targetArr[i] = new Person(targetArr[j].getname(), targetArr[j].getSolveNum(), targetArr[j].getPBM_Arr());
			targetArr[j] = new Person(temp.getname(), temp.getSolveNum(), temp.getPBM_Arr());
			//
			if (targetArr[i] == key) {
				j--;
			} else {
				i++;
			}
		}

		/* 关键数据放到‘中间’ */
		// sUtil.swap(targetArr, start, j);
		// Person copy
		// Person(String sn,int sSolve,Problem[] sPBMA){
		Person temp = new Person(targetArr[i].getname(), targetArr[i].getSolveNum(), targetArr[i].getPBM_Arr());
		targetArr[i] = new Person(targetArr[j].getname(), targetArr[j].getSolveNum(), targetArr[j].getPBM_Arr());
		targetArr[j] = new Person(temp.getname(), temp.getSolveNum(), temp.getPBM_Arr());
		//
		if (start < i - 1) {
			this.quickSort(targetArr, start, i - 1);
		}
		if (j + 1 < end) {
			this.quickSort(targetArr, j + 1, end);
		}

		return targetArr;

	}// Quick -end

	public static void main(String arges[]) throws FileNotFoundException {
		File in = new File("G:\\a.in");
		File fout = new File("G:\\output.out");
		Scanner scan = new Scanner(in);
		PrintStream out = new PrintStream(fout);

		BgnTM = scan.nextLine();
		// 21 shi konge
		EndTM = BgnTM.substring(22, BgnTM.length());
		BgnTM = BgnTM.substring(0, 21);
		// System.out.println(BgnTM+"=="+EndTM);
		int i = 0;
		String[] PBNstr = scan.nextLine().split(" ");
		while (i < PBNstr.length) {
			PBM_NAME[i] = Integer.parseInt(PBNstr[i]);//
			i++;
		}
		PBM_NAME_LEN = PBNstr.length;
		//
		String starttime = BgnTM;
		String endtime = EndTM;
		String[] testarr = new String[329];
		int k = 0;
		while (scan.hasNextLine()) {
			int FLAG = 1;// ok addit
			System.out.println("第" + k + "次");
			String str1 = new String(scan.nextLine());

			//
			String str[] = str1.split(" ");
			String nowtime = str[7] + " " + str[8];
			if (nowtime.length() < 19) {
				String strli[] = str[7].split("-");
				strli[1] = "0" + strli[1];
				strli[2] = "0" + strli[2];
				str[7] = strli[0] + "-" + strli[1] + "-" + strli[2];

				str1 = str[0] + " " + str[1] + " " + str[2] + " " + str[3] + " " + str[4] + " " + str[5] + " " + str[6]
						+ " " + str[7] + " " + str[8];
				nowtime = str[7] + " " + str[8];
				System.out.println("致命错误  修改k=" + k + "str1.length=" + str1.length() + "str1=" + str1);
			}

			long li = Problem.getT1_T21(nowtime, starttime, 0);
			if (li < 0) {
				FLAG = 0;// error
				System.out.print(nowtime + "低于开始时间\n");
			} else if (Problem.getT1_T21(endtime, nowtime, 0) < 0) {
				FLAG = 0;// error
				System.out.print(nowtime + "高于结束时间\n");
			}

			for (int kk = 0; kk < k; kk++) {
				if (str1.equals(testarr[kk])) {

					System.out.println(k + " 重复数据");
					FLAG = 0;// error
					break;
				}
			}
			if (FLAG == 1)
				testarr[k] = new String(str1);
			else
				k--;
			k++;
		}
		int len = k;//
		Arrays.sort(testarr, 0, k);
		// pai xu wanchang

		//
		Person newp = new Person();
		int ALLPER = 0;// person
		if(k>100)
		{k = 0;}
		else{
			for(int kl=0;kl<k/2;kl++){
				String temp = new String(testarr[kl]);
				testarr[kl] =  new String(testarr[k-kl-1]);
				testarr[k-kl-1] =  new String(temp);
			}
		}
		k=0;
		while (k < len) {

			String[] info = testarr[k].split(" ");
			info[7] += " " + info[8];// 2011-08-17+19:27:41
			for (i = 0; i < ALLPER; i++) {
				if (info[1].equals(person[i].getname())) {
					//
					//
					person[i].SubmitInfo(Integer.parseInt(info[2]), info[3],

					info[7]);
					break;
				}

			}
			if (i == ALLPER) {
				//
				person[ALLPER] = new Person(info[1]);
				person[ALLPER].SubmitInfo(Integer.parseInt(info[2]), info[3], info

				[7]);
				ALLPER++;
			}

			k++;
		}
		// in -end

		int[] ppf = new int[1024];
		for (int ii = 0; ii < ALLPER; ii++)
			ppf[ii] = 0;//
		int best = 0;
		int jj;

		//out.println("Rank Name Solved 1000 1001 1002 1003 1004 Penalty");
		String sp ="";
		for(int kk=0;kk<PBM_NAME_LEN;kk++){
			sp += PBM_NAME[kk] +" ";
		}
		out.println("Rank Name Solved "+sp+"Penalty");
		for (int ii = 0; ii < ALLPER; ii++) {
			// best = 0;//
			for (jj = 0; jj < ALLPER; jj++) {
				if (ppf[jj] == 0) {
					best = jj;
					break;
				}
			}
			if (jj == ALLPER) {
				//
				break;
			}
			for (int kk = 0; kk < ALLPER; kk++) {
				if ((ppf[kk] == 0) && (kk != best) && person[best].compareTo(person[kk]) == -1) {

					best = kk;
				}
			} // for -end

			out.print("" + (ii + 1) + " " + person[best].getname() + " " + person[best].getSolveNum() + " ");

			out.print(person[best].getHowmanySolve());//

			long hms = person[best].getPersonValue();

			out.println((hms) / 3600 + ":" + (hms % 3600) / 60 + ":" + (hms % 60));

			ppf[best] = 1;
		}

		scan.close();
		out.close();

		System.out.print("ewew");

	}

}

////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////

// import java.io.File;
// import java.io.FileNotFoundException;
// import java.io.PrintWriter;
// import java.text.SimpleDateFormat;
// import java.util.Date;
// import java.util.Scanner;
// import java.util.logging.SimpleFormatter;
//
//// import javax.xml.crypto.Data;
//
// public class Main {
//
// static String ACstr = "Accepted";
// static String BgnTM = "";
// static String EndTM = "";
// static int[] PBM_NAME = new int[1024];
// static Person[] person = new Person[1024];
// static int PBM_NAME_LEN = 0;
//
// public static void main(String arges[]) throws FileNotFoundException {
// File in = new File("G:\\input.in");
// File fout = new File("G:\\output.out");
// Scanner scan = new Scanner(in);
// PrintWriter out = new PrintWriter(fout);
// // dedaole shijian
// BgnTM = scan.nextLine();
// // 21 shi konge
// EndTM = BgnTM.substring(22, BgnTM.length());
// BgnTM = BgnTM.substring(0, 21);
// // System.out.println(BgnTM+"=="+EndTM);
// int i = 0;
// String[] PBNstr = scan.nextLine().split(" ");
// while (i < PBNstr.length) {
// PBM_NAME[i] = Integer.parseInt(PBNstr[i]);// 划分数组
// i++;
// }
// PBM_NAME_LEN = PBNstr.length;
// //
//
// // kaishi duqu tijiao xinxi
// Person newp = new Person();
// int ALLPER = 0;// 总人数
// while (scan.hasNextLine()) {
// // 31 lzz 1000 Accepted 904K 10MS C++ 2008-04-25 23:29:27.0
// // 0 1 2 3 4 5 6 7 8
// String[] info = scan.nextLine().split(" ");
// for (i = 0; i < ALLPER; i++) {
// if (info[1].equals(person[i].getname())) {
// // 已经被储存过的 person
// // 题号 评判结果 提交时间
// person[i].SubmitInfo(Integer.parseInt(info[2]), info[3], info[8]);
// break;
// }
//
// }
// if (i == ALLPER) {
// // 循环内没有匹配的 name 则是新人
// person[ALLPER] = new Person(info[1]);
// person[ALLPER].SubmitInfo(Integer.parseInt(info[2]), info[3], info[8]);
// ALLPER++;
// }
//
// }
// // output.out
// // maopao
// int[] ppf = new int[1024];
// for (int ii = 0; ii < ALLPER; ii++)
// ppf[ii] = 0;// 未输出
// int best = 0;
// int jj;
//
//
// //System.out.println("Rank Name Solved 1000 1001 1002 1003 1004 Penalty ");
// out.println("Rank Name Solved 1000 1001 1002 1003 1004 Penalty ");
// for (int ii = 0; ii < ALLPER; ii++) {
// //best = 0;// 假设 ii 是最好的
// for( jj=0;jj<ALLPER;jj++){
// if(ppf[jj] == 0)
// { best =jj;
// break;
// }
// }
// if(jj == ALLPER){
// //没有未输出的person了
// break;
// }
// for (int kk = 0; kk < ALLPER ; kk++) {
// if ((ppf[kk] == 0) && (kk!=best)&&person[best].compareTo(person[kk]) == -1) {
// // ii < kk
// best = kk;
// }
// } // for -end
//
// //System.out.print("" + (ii + 1) + " " + person[best].getname() + " " +
// person[best].getSolveNum() + " ");
// out.print("" + (ii + 1) + " " + person[best].getname() + " " +
// person[best].getSolveNum() + " ");
// //System.out.print(person[best].getHowmanySolve());//自带空格 （空格在 右）
// out.print(person[best].getHowmanySolve());//自带空格 （空格在 右）
// // 输出 penalty
// long hms = person[best].getPersonValue();
//
// //System.out.println((hms)/3600+":"+(hms%3600)/60+":"+(hms%60)+" ");
// out.println((hms)/3600+":"+(hms%3600)/60+":"+(hms%60)+" ");
// //System.out.println();
// ppf[best] = 1;
// }
//
// //System.out.println("END");
// scan.close();
// out.close();
//
//
// }
//
// }
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// class Person implements Comparable<Person> {
// // 提交 ID 、用户名、题目 ID 、判题结果、占用内存、耗时、编程语言、代码长度和提交时间
// // 时间默认 MS 内存默认K
// private int id;
// private String name;
// // private String sbmtime;// submit time
// private int SolveNum;// 解决的数量
//
// private int TatalTime;// Penalty time
// private Problem[] pbmarray = new Problem[5];// 5 ge timu
//
// Person() {
// for (int i = 0; i < Main.PBM_NAME_LEN; i++)
// pbmarray[i] = new Problem(Main.PBM_NAME[i]);// 10000,10001--10004
// }
//
// Person(String n) {
// this.name = new String(n);
// for (int i = 0; i < Main.PBM_NAME_LEN; i++)
// pbmarray[i] = new Problem(Main.PBM_NAME[i]);// 10000,10001--10004
// // this.sbmtime = new String(sbtm);
// }
//
// ////
// public String getname() {
// return this.name;
// }
//
// public String getHowmanySolve() {
// String str = "";
// for (int ii = 0; ii < Main.PBM_NAME_LEN; ii++) {
// if (this.pbmarray[ii].getisAC()) {
// str += this.pbmarray[ii].getSolvetime()+" ";//getSolvetime 是单个题目加上 wa的时间
// } else if(this.pbmarray[ii].getWAcnt()!=0){
// str += (this.pbmarray[ii].getWAcnt()*-1)+" ";
// }else{
// //0 次 WA 0 次AC
// str+="0 ";
// }
//
// }
// return str;
// }
//
// //返回 AC+罚时总时间 Penalty
// public long getPersonValue() {
// long diff = 0;
// // 循环查找 AC的题 并统计总时间
// for (int i = 0; i < Main.PBM_NAME_LEN; i++)
//
// if (this.pbmarray[i].getisAC()) {
// // AC timu
// SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss.0");
//
// // H = M = S = 0l;
//
// try {
// Date d2 = sdf.parse("00:00:00.0");// H M S
// Date d1 = sdf.parse(this.pbmarray[i].getSolvetime() + ".0");
//
// diff =diff+ (d1.getTime() - d2.getTime())/1000;// 以秒为单位
// //diff = diff / 1000;// 以秒为单位
// // H = diff / 3600;
// // M = (diff % 3600) / 60;
// // S = (diff % 3600) % 60;
// } catch (Exception e) {
// // TODO: handle exception
// }
//
// }
// return diff;//秒为单位 计算所有的AC 题； 总时间 Penalty
// }
// // public String getsbmtime() {
// // return this.sbmtime;
// // }
//
// public int getSolveNum() {
// return SolveNum;
// }
//
// public void addSolvenum() {
// this.SolveNum++;
// }
//
// public void SubmitInfo(int pbmnum, String res, String time) {
// for (int i = 0; i < this.pbmarray.length; i++)
// // pbmarray[i].setpbmid(Main.PBM_NAME[i]);//10000,10001--10004
// if (pbmnum == pbmarray[i].getpbmid()) {
// // zhaodao tijiaode timu
// if (res.equals(Main.ACstr) && (pbmarray[i].getisAC()) == false) {
// // AC
// this.pbmarray[i].setSolvetime(time);// HMS 更新 总的Solvetime
// this.addSolvenum();// 增加解题数目 1
//
// } else if (!pbmarray[i].getisAC()) {
// // not AC
// this.pbmarray[i].addWA_NUM();// WA 数目加一
// }
// } else {
// // System.out.println("[致命错误]Person.SubmitInfo()函数：pbmarray[]数组中的题目id
// // 无法匹配 通过in入的数据pbmnum");
// }
// }
//
// // // 重写 Comparable
// // public int CompareTo(Person o) {
// //
// // }
//
// public int compareTo(Person o) {
// // TODO 自动生成的方法存根
// // this win = 1:-1
// Person p = (Person) o;
// if (this.SolveNum != p.SolveNum) {
// // 解题数目 相等
// return (this.SolveNum > p.SolveNum ? 1 : -1);
// } else if (this.getPersonValue() != p.getPersonValue())
// return (this.getPersonValue() > p.getPersonValue() ? -1 : 1);//所花时间越短越好
// else if (this.getname().compareTo(p.getname()) != 0) {
// // a.compareTo(c) = a-c = -2;
// return (this.getname().compareTo(p.getname()) < 0 ? 1 : -1);
// } else {
// System.out.println("[致命错误]Person.CompareTo()函数,比较到底也无法分出 thebest");
// }
// return 0;
//
// }
//
// }
//
//
//
// class Problem {
// private int pbmid;
// private boolean isAC = false;// AC
// private int WA_cnt = 0;// cuowu cishu
// private String Solvetime = "";// AC 一题之后 统计总共话费的时间 包括罚时
//
// public Problem(int id) {
// this.pbmid = id;
// }
//
// public int get_fa_Time() {
// if (isAC) {
// return WA_cnt * 20 * 60;// minutes
// }
// return 0;// bujilu
// }
// public int getWAcnt(){
// return this.WA_cnt;
// }
// public boolean getisAC() {
// return this.isAC;
// }
//
// public String getSolvetime() {
// return this.Solvetime;
// }
//
// public void setpbmid(int num) {
// this.pbmid = num;
// }
//
// public int getpbmid() {
// return this.pbmid;
// }
//
// public void setSolvetime(String timefmt) {// ///////////////solve time
//
// String[] bng_HMS = Main.BgnTM.split(" ");
// this.Solvetime = new String(getT1_T2(timefmt, bng_HMS[1], WA_cnt));// HMS
// this.isAC = true;
//
// }
//
// public void addWA_NUM() {
// this.WA_cnt++;
// }
//
// public static String getT1_T2(String t1, String t2, int WA_time) {
// // 处理 H:M:S单字符的情况
// String[] stime = t1.substring(0, t1.length() - 2).split(":");
// t1 = "";
// for (int i = 0; i < stime.length; i++) {
// if (stime[i].length() < 2)
// stime[i] = "0" + stime[i];
//
// t1 += stime[i];
// if(i!= stime.length-1)
// t1+=":";
// }
// // t2
// stime = t2.substring(0, t2.length() - 2).split(":");
// t2 = "";
// for (int i = 0; i < stime.length; i++) {
// if (stime[i].length() < 2)
// stime[i] = "0" + stime[i];
// t2 += stime[i];
// if(i!= stime.length-1)
// t2+=":";
// }
// //System.out.println("t1 = " + t1 + " t2 =" + t2);
// //
// SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
// long diff = 0;
// long H;
// long S;
// long M;
// H = M = S = 0l;
// // String []bgntm_DH=Main.BgnTM.split(" ");
// try {
// Date d1 = sdf.parse(t1);// H M S
// Date d2 = sdf.parse(t2);
//
// diff = d1.getTime() - d2.getTime() + WA_time;
// diff = diff / 1000;// 以秒为单位
// H = diff / 3600;
// M = (diff % 3600) / 60;
// S = (diff % 3600) % 60;
// } catch (Exception e) {
// // TODO: handle exception
// }
// // sdf = new SimpleDateFormat("H:mm:ss");
// String str = "" + H + ":" + M + ":" + S;
// // str += ":" + (M > 9 ? "" : ("0")) + M;
// // str += ":" + (S > 9 ? "" : "0") + S;
// //System.out.println(str);
// return str;
// }
// }
